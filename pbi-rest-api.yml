# Power BI REST API pipeline.
# Extracts refresh history for all datasets in all Power BI workspaces
# and saves to a CSV/JSON file in Azure Blob Storage.
# https://aka.ms/yaml

# All parameters have default values and can be overridden in the pipeline
parameters:
  - name: vmImage
    type: string
    displayName: VM Image
    default: 'windows-latest'
    values:
      - 'ubuntu-latest'
      - 'windows-latest'
      - 'macOS-latest'
  - name: OutputJsonPath
    type: string
    displayName: Output JSON Path
    default: 'refresh-history.json'
  - name: OutputCsvPath
    type: string
    displayName: Output CSV Path
    default: 'refresh-history.csv'
  - name: MaxDatasets
    type: number
    displayName: Max Datasets
    default: 500
  - name: MaxRefreshes
    type: number
    displayName: Max Refreshes
    default: 500
  - name: StartDate
    type: string
    displayName: Start Date
    default: '1900-01-01'
  - name: EndDate
    type: string
    displayName: End Date
    default: '2200-01-01'

trigger:
- main

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight (UTC) refresh
  branches:
    include:
      - main
  always: true

variables:
  # $TenantId, $AppId, $AppSecret, $ServiceConnection, $StorageAccount, $StorageContainer
  - group: pbi-rest-api-variables

stages:

- stage: GetRefreshHistoryStage
  displayName: Get Refresh History Stage
  pool:
    vmImage: ${{ parameters.vmImage }}
  
  jobs:

  - job: GetRefreshHistoryJob

    steps:

    - task: PowerShell@2
      displayName: 'Get Refresh History'
      name: GetRefreshHistoryStep
      inputs:
        pwsh: true
        targetType: inline
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        script: |
          $TenantId = "$(TenantId)"
          $AppId = "$(AppId)"
          $AppSecret = ConvertTo-SecureString "$(AppSecret)" -AsPlainText -Force

          $RefreshHistory = @()
          ./Get-RefreshHistory.ps1 `
            -TenantId $TenantId `
            -AppId $AppId `
            -AppSecret $AppSecret `
            -OutputJsonPath ${{ parameters.OutputJsonPath }} `
            -OutputCsvPath ${{ parameters.OutputCsvPath }} `
            -MaxDatasets ${{ parameters.MaxDatasets }} `
            -MaxRefreshes ${{ parameters.MaxRefreshes }} `
            -StartDate ${{ parameters.StartDate }} `
            -EndDate ${{ parameters.EndDate }} `
            -RefreshHistory ([ref]$RefreshHistory)

          # Refresh count for tasks within this job
          Write-Host "##vso[task.setvariable variable=RefreshCount]$($RefreshHistory.Count)"

          # Refresh count for tasks in other jobs
          Write-Host "##vso[task.setvariable variable=JobRefreshCount;isOutput=true]$($RefreshHistory.Count)"

    - publish: $(System.DefaultWorkingDirectory)
      condition: and(succeeded(), and(gt(variables.RefreshCount, 0), or(ne('${{ parameters.OutputJsonPath }}',''), ne('${{ parameters.OutputCsvPath }}',''))))
      artifact: refresh-history

  - job: PublishRefreshHistoryJob
    dependsOn: GetRefreshHistoryJob
    condition: gt(dependencies.GetRefreshHistoryJob.outputs['GetRefreshHistoryStep.JobRefreshCount'], 0)

    steps:

    - download: current
      artifact: refresh-history
      patterns: |
        **/*.json
        **/*.csv

    # - task: PowerShell@2
    #   inputs:
    #     workingDirectory: '$(System.DefaultWorkingDirectory)'
    #     pwsh: true
    #     targetType: inline
    #     script: |
    #       Get-ChildItem -Recurse -Path '$(Pipeline.Workspace)/refresh-history/*' -Include '*.json', '*.csv' -Name

    # - task: AzureCLI@2
    #   condition: and(succeeded(), ne('${{ parameters.OutputJsonPath }}',''))
    #   displayName: 'Copy JSON to Azure Blob Storage'
    #   inputs:
    #     azureSubscription: $(ServiceConnection)
    #     workingDirectory: '$(Pipeline.Workspace)/refresh-history'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       $StorageAccountName = 'pbi-rest-api'
    #       $StorageAccountKey = az storage account keys list --account-name $StorageAccountName --query '[0].value' -o tsv
    #       Write-Host "##vso[task.setvariable variable=StorageAccountKey]$StorageAccountKey"

    - task: AzureFileCopy@5
      condition: and(succeeded(), ne('${{ parameters.OutputJsonPath }}',''))
      displayName: 'Copy JSON Refresh History to Azure Blob Storage'
      name: CopyJsonRefreshHistory
      inputs:
        SourcePath: '$(Pipeline.Workspace)/refresh-history/${{ parameters.OutputJsonPath }}'
        azureSubscription: $(ServiceConnection)
        Destination: AzureBlob
        storage: $(StorageAccount)
        ContainerName: $(StorageContainer)
        BlobPrefix: ''

    - task: AzureFileCopy@5
      condition: and(succeeded(), ne('${{ parameters.OutputCsvPath }}',''))
      displayName: 'Copy CSV Refresh History to Azure Blob Storage'
      name: CopyCsvRefreshHistory
      inputs:
        SourcePath: '$(Pipeline.Workspace)/refresh-history/${{ parameters.OutputCsvPath }}'
        azureSubscription: $(ServiceConnection)
        Destination: AzureBlob
        storage: $(StorageAccount)
        ContainerName: $(StorageContainer)
        BlobPrefix: ''
  

  # - task: AzureFileCopy@5
  #   displayName: 'Copy Refresh History to Azure Blob Storage'
  #   name: CopyRefreshHistory
  #   inputs:
  #     SourcePath: '$(Pipeline.Workspace)'
  #     azureSubscription: 'Power BI REST API'
  #     Destination: AzureBlob
  #     storage: 'pbi-rest-api'
  #     ContainerName: 'refresh-history'
  #     BlobPrefix: 'refresh-history'
  #     outputStorageUri: 'RefreshHistoryBlobUri'
  #     outputStorageContainerSasToken: 'RefreshHistoryBlobSasToken'

  # - task: PowerShell@2
  #   displayName: 'Publish Refresh History'
  #   name: PublishRefreshHistoryStep
  #   inputs:
  #     pwsh: true
  #     targetType: inline
  #     script: |
  #       $RefreshHistory = $(RefreshHistory)
  #       Write-Output "==================================================="
  #       Write-Output "Refresh History Count: $($RefreshHistory.Count)"
  #       Write-Output "Refresh History: $RefreshHistory"
  #       Write-Output ""
  #       foreach ($refresh in $RefreshHistory) {
  #         Write-Output "==================================================="
  #         Write-Output "$($refresh.workspaceName)"
  #         Write-Output "$($refresh.datasetName)"
  #         Write-Output "$($refresh.startTime)"
  #         Write-Output "$($refresh.endTime)"
  #         Write-Output "$($refresh.status)"
  #         Write-Output ""
  #       }
